<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Hello World</title>
    <url>/2023/09/04/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a class="link"   href="https://hexo.io/" >Hexo <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>! This is your very first post. Check <a class="link"   href="https://hexo.io/docs/" >documentation <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> for more info. If you get any problems when using Hexo, you can find the answer in <a class="link"   href="https://hexo.io/docs/troubleshooting.html" >troubleshooting <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> or you can ask me on <a class="link"   href="https://github.com/hexojs/hexo/issues" >GitHub <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure></div>

<p>More info: <a class="link"   href="https://hexo.io/docs/writing.html" >Writing <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure></div>

<p>More info: <a class="link"   href="https://hexo.io/docs/server.html" >Server <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure></div>

<p>More info: <a class="link"   href="https://hexo.io/docs/generating.html" >Generating <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure></div>

<p>More info: <a class="link"   href="https://hexo.io/docs/one-command-deployment.html" >Deployment <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
]]></content>
  </entry>
  <entry>
    <title>自动化上下架工具</title>
    <url>/2023/09/04/%E8%87%AA%E5%8A%A8%E5%8C%96%E4%B8%8A%E4%B8%8B%E6%9E%B6%E5%B7%A5%E5%85%B7/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>依赖于 springboot 和 mybatisPlus 实现的一个自动定时扫描上下架时间，并切换数据状态的工具，主要是减少开发中的重复代码，能够更专注于写更多有意义的代码，并且简历上也能好看点。</p>
<h2 id="开发版本"><a href="#开发版本" class="headerlink" title="开发版本"></a>开发版本</h2><ul>
<li>JDK1.8</li>
<li>SpringBoot2.4.2</li>
<li>mp3.5.2</li>
</ul>
<h2 id="主要设计思路"><a href="#主要设计思路" class="headerlink" title="主要设计思路"></a>主要设计思路</h2><p>在 dao 层的 bean 贴上自己自定义的注解，依赖于 spring 的包扫描功能，实现自定义的包扫描逻辑，扫描出需要进行自动化的 bean。再通过实现 applicationRunner 接口，在项目启动后存储与 db 操作的一些信息。此外我会定义顶层的接口，通过抽象类去定义执行顺序，并在最后的实现类实现一些默认的通用的操作，预留注解参数，如果有些特殊操作需要特殊实现也可以实现我的顶层接口。</p>
<h2 id="具体实现"><a href="#具体实现" class="headerlink" title="具体实现"></a>具体实现</h2><h4 id="顶层接口"><a href="#顶层接口" class="headerlink" title="顶层接口"></a>顶层接口</h4><p>规定需要实现上下架逻辑，且有泛型作为参数传入。T 为 Iservice 实现类，V 为 bean。</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">AutoManageFactory</span>&lt;T <span class="keyword">extends</span> <span class="title class_">IService</span>&lt;V&gt;, V&gt; &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 上架逻辑</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> t</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> v</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">putAway</span><span class="params">(T t,V v)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 下架逻辑</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> t</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> v</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">soldOut</span><span class="params">(T t,V v)</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h4 id="抽象类"><a href="#抽象类" class="headerlink" title="抽象类"></a>抽象类</h4><p>主要是规定执行流程，后期也好做前中后的一些植入操作，最终的所有方法都回去执行 process（）这个方法，而他里面其实就是简单调用了底层实现类的上下架方法。</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">AbsAutoManageFactory</span>&lt;T <span class="keyword">extends</span> <span class="title class_">IService</span>&lt;V&gt;, V&gt; <span class="keyword">implements</span> <span class="title class_">AutoManageFactory</span>&lt;T,V&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> T t ;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> V v ;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">AbsAutoManageFactory</span><span class="params">(T t, V v)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(t == <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">this</span>.t = t;</span><br><span class="line">        <span class="built_in">this</span>.v = v;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 定义执行流程</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">process</span><span class="params">()</span>&#123;</span><br><span class="line">        putAway(t,v);</span><br><span class="line">        soldOut(t,v);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h4 id="默认的通用实现类"><a href="#默认的通用实现类" class="headerlink" title="默认的通用实现类"></a>默认的通用实现类</h4><p>主要依赖于 mybatisPlus 进行简单实现，前提是规范好，所有需要参与自动扫描上下架的表都必须包含 开始、结束时间以及状态</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DefAutoManageFactoryImpl</span>&lt;T <span class="keyword">extends</span> <span class="title class_">IService</span>&lt;V&gt;, V&gt; <span class="keyword">extends</span> <span class="title class_">AbsAutoManageFactory</span>&lt;T, V&gt; &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">DefAutoManageFactoryImpl</span><span class="params">(T t, V v)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(t, v);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">putAway</span><span class="params">(T t, V v)</span> &#123;</span><br><span class="line">        <span class="type">long</span> <span class="variable">nowTime</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line"></span><br><span class="line">        UpdateWrapper&lt;V&gt; vUpdateWrapper = <span class="keyword">new</span> <span class="title class_">UpdateWrapper</span>&lt;&gt;();</span><br><span class="line">        vUpdateWrapper.ne(AutoManageConstant.STATUS, AutoManageConstant.StatusEnum.DEL.getValue())</span><br><span class="line">                .le(AutoManageConstant.START_TIME, nowTime)</span><br><span class="line">                .ge(AutoManageConstant.END_TIME, nowTime)</span><br><span class="line">                .set(AutoManageConstant.STATUS, AutoManageConstant.StatusEnum.NORMAL.getValue());</span><br><span class="line"></span><br><span class="line">        t.update(vUpdateWrapper);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">soldOut</span><span class="params">(T t, V v)</span> &#123;</span><br><span class="line">        <span class="type">long</span> <span class="variable">nowTime</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line"></span><br><span class="line">        UpdateWrapper&lt;V&gt; vUpdateWrapper = <span class="keyword">new</span> <span class="title class_">UpdateWrapper</span>&lt;&gt;();</span><br><span class="line">        vUpdateWrapper.ne(AutoManageConstant.STATUS, AutoManageConstant.StatusEnum.DEL.getValue())</span><br><span class="line">                .and(updateWrapper -&gt; updateWrapper.ge(AutoManageConstant.START_TIME, nowTime).or().le(AutoManageConstant.END_TIME, nowTime))</span><br><span class="line">                .set(AutoManageConstant.STATUS, AutoManageConstant.StatusEnum.NOT_NORMAL.getValue());</span><br><span class="line"></span><br><span class="line">        t.update(vUpdateWrapper);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h4 id="常数类"><a href="#常数类" class="headerlink" title="常数类"></a>常数类</h4><p>没啥好解释的。</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AutoManageConstant</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">STATUS</span> <span class="operator">=</span> <span class="string">&quot;status&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">START_TIME</span> <span class="operator">=</span> <span class="string">&quot;start_time&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">END_TIME</span> <span class="operator">=</span> <span class="string">&quot;end_time&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">ID</span> <span class="operator">=</span> <span class="string">&quot;id&quot;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> ArrayList&lt;AutoManageFactory&gt; AUTO_MANAGE_FACTORIES_LIST = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> ArrayList&lt;Class&lt;?&gt;&gt; BEAN_CLASS_LIST = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">enum</span> <span class="title class_">StatusEnum</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * NORMAL 正常</span></span><br><span class="line"><span class="comment">         * NOT_NORMAL 非正常</span></span><br><span class="line"><span class="comment">         * DEL 逻辑删除</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        NORMAL(<span class="number">1</span>, <span class="string">&quot;VALID&quot;</span>),</span><br><span class="line">        NOT_NORMAL(<span class="number">0</span>, <span class="string">&quot;INVALID&quot;</span>),</span><br><span class="line">        DEL(-<span class="number">1</span>, <span class="string">&quot;DEL&quot;</span>);</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> Integer value;</span><br><span class="line">        <span class="keyword">private</span> String desc;</span><br><span class="line"></span><br><span class="line">        StatusEnum(Integer value, String desc) &#123;</span><br><span class="line">            <span class="built_in">this</span>.value = value;</span><br><span class="line">            <span class="built_in">this</span>.desc = desc;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> Integer <span class="title function_">getValue</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> value;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> StatusEnum <span class="title function_">getDescByValue</span><span class="params">(Integer value)</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (value == <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span> (StatusEnum em : StatusEnum.values()) &#123;</span><br><span class="line">                <span class="keyword">if</span> (value.equals(em.value)) &#123;</span><br><span class="line">                    <span class="keyword">return</span> em;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h4 id="注解定义"><a href="#注解定义" class="headerlink" title="注解定义"></a>注解定义</h4><p>service 规定要传入 bean 的 mp 的 service 层 class，由于他已经被 spring 注册，我们获取的时候以单例的形式获取即可；</p>
<p>autoManageFactory 传入一个上下架操作逻辑的实现类 class，他必须是 AutoManageFactory 的实现类，默认 DefAutoManageFactoryImpl 已经实现了通用操作</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Target(&#123;ElementType.TYPE, ElementType.METHOD&#125;)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> AutoManage &#123;</span><br><span class="line"></span><br><span class="line">        Class&lt;? <span class="keyword">extends</span> <span class="title class_">IService</span>&lt;?&gt;&gt; service();</span><br><span class="line"></span><br><span class="line">        Class&lt;? <span class="keyword">extends</span> <span class="title class_">AutoManageFactory</span>&gt; autoManageFactory() <span class="keyword">default</span> DefAutoManageFactoryImpl.class;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h4 id="扫描注解"><a href="#扫描注解" class="headerlink" title="扫描注解"></a>扫描注解</h4><p>主要作用于触发 spring 的扫描机制，AutoManageScannerRegistrar 是我们自己实现的扫描逻辑，接下去会介绍</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Target(&#123;ElementType.TYPE, ElementType.METHOD&#125;)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Import(AutoManageScannerRegistrar.class)</span></span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> AutoManageScan &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//配置扫描的包</span></span><br><span class="line">    String[] baseClassPage() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h4 id="自定义扫描过滤规则"><a href="#自定义扫描过滤规则" class="headerlink" title="自定义扫描过滤规则"></a>自定义扫描过滤规则</h4><p>我们主要是扫描配置的包下的所有贴上自定义注解的 bean，返回他们的相关信息，这个 BeanDefinitionHolder 包含着 class 信息<br>这里有个坑，之前直接调用父类的扫描方法 super.doScan()发现一直扫描不到我想要的类，后面跟踪源码才发现，父类的默认实现有一个 checkCandidate 判断，判断是否被注册过了，如果否返回 true，否则接下去就算不抛异常的情况下，也只会返回 false。所以我把父类的方法复制出来，去掉一些多余的东西，构成了这个方法。</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FindServiceClassPathScanHandle</span> <span class="keyword">extends</span> <span class="title class_">ClassPathBeanDefinitionScanner</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">FindServiceClassPathScanHandle</span><span class="params">(BeanDefinitionRegistry registry, <span class="type">boolean</span> useDefaultFilters)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(registry, useDefaultFilters);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@NotNull</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> Set&lt;BeanDefinitionHolder&gt; <span class="title function_">doScan</span><span class="params">(<span class="meta">@NotNull</span> String... basePackages)</span> &#123;</span><br><span class="line">        Assert.notEmpty(basePackages, <span class="string">&quot;At least one base package must be specified&quot;</span>);</span><br><span class="line">        addIncludeFilter(<span class="keyword">new</span> <span class="title class_">AnnotationTypeFilter</span>(AutoManage.class));</span><br><span class="line">        Set&lt;BeanDefinitionHolder&gt; beanDefinitions = <span class="keyword">new</span> <span class="title class_">LinkedHashSet</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (String basePackage : basePackages) &#123;</span><br><span class="line">            Set&lt;BeanDefinition&gt; candidates = findCandidateComponents(basePackage);</span><br><span class="line">            <span class="keyword">for</span> (BeanDefinition candidate : candidates) &#123;</span><br><span class="line">                <span class="type">String</span> <span class="variable">beanClassName</span> <span class="operator">=</span> candidate.getBeanClassName();</span><br><span class="line">                <span class="keyword">assert</span> beanClassName != <span class="literal">null</span>;</span><br><span class="line">                <span class="type">BeanDefinitionHolder</span> <span class="variable">beanDefinitionHolder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BeanDefinitionHolder</span>(candidate,beanClassName);</span><br><span class="line">                beanDefinitions.add(beanDefinitionHolder);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> beanDefinitions;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h4 id="组装类"><a href="#组装类" class="headerlink" title="组装类"></a>组装类</h4><p>最后就是这个类，实现了 ApplicationRunner，他底层是用监听者模式来实现，ApplicationRunner 是在应用容器启动之后会回调到，在 ApplicationStartedListener 调用之后被调用。如果说 ApplicationListener 中有阻塞，那么 ApplicationRunner 也都不会被调用。<br>我通过反射的反射，去实例化相关的实现类，并且存储起来，在接下来的定时任务中，只要遍历列表去执行 process 即可。<br>order（）是为了让他在最后执行，避免多个 ApplicationRunner 实现类出现的无法控制问题。</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Order()</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AutoManageApplicationRunnerImpl</span> <span class="keyword">implements</span> <span class="title class_">ApplicationRunner</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ApplicationContext applicationContext;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">(ApplicationArguments args)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (AutoManageConstant.BEAN_CLASS_LIST.size() &lt; <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        ArrayList&lt;Class&lt;?&gt;&gt; beanClassList = AutoManageConstant.BEAN_CLASS_LIST;</span><br><span class="line">        beanClassList.forEach(<span class="built_in">this</span>::assembleAutoManageFactory);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">assembleAutoManageFactory</span><span class="params">(Class&lt;?&gt; aClass)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">AutoManage</span> <span class="variable">annotation</span> <span class="operator">=</span> aClass.getAnnotation(AutoManage.class);</span><br><span class="line">        Class&lt;?&gt; service = annotation.service();</span><br><span class="line">        IService&lt;?&gt; bean = (IService&lt;?&gt;) applicationContext.getBean(service);</span><br><span class="line"></span><br><span class="line">        Class&lt;?&gt; autoManageFactoryClass = annotation.autoManageFactory();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Constructor&lt;?&gt; constructor = autoManageFactoryClass.getConstructor(IService.class, Object.class);</span><br><span class="line">            <span class="type">AbsAutoManageFactory</span> <span class="variable">autoManageFactory</span> <span class="operator">=</span> (AbsAutoManageFactory) constructor.newInstance(bean, aClass.newInstance());</span><br><span class="line">            AutoManageConstant.AUTO_MANAGE_FACTORIES_LIST.add(autoManageFactory);</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (InstantiationException | IllegalAccessException | NoSuchMethodException |</span><br><span class="line">                 InvocationTargetException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Centos多版本Python环境共存</title>
    <url>/2023/09/06/CentOs%E5%A4%9A%E7%89%88%E6%9C%ACPython%E7%8E%AF%E5%A2%83%E5%85%B1%E5%AD%98/</url>
    <content><![CDATA[<h3 id="安装流程"><a href="#安装流程" class="headerlink" title="安装流程"></a>安装流程</h3><ol>
<li>安装ssl</li>
<li>安装python</li>
</ol>
<p>注：建议不同版本做区分如Python3.10、python3.11</p>
<h4 id="SSL"><a href="#SSL" class="headerlink" title="SSL"></a>SSL</h4><h4 id="python"><a href="#python" class="headerlink" title="python"></a>python</h4><ul>
<li>下载源码压缩包,解压编译安装(-C 指定安装目录)</li>
</ul>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">tar -zxvf Python-3.10.10.tgz  -C /usr/local/python3.10</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">./configure --prefix=/usr/local/python3.10&amp;&amp; sudo make &amp;&amp; sudo make install</span><br></pre></td></tr></table></figure></div>

<ul>
<li>建立软链接(如存在可先删除)</li>
</ul>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">ln -s /usr/local/python3.10/bin/python3.10 /usr/bin/python3.10</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">python3.10 --version</span><br></pre></td></tr></table></figure></div>

<ul>
<li>配置Pip软链接</li>
</ul>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">ln -s /cxb/python3.10.10/bin/pip3 /usr/bin/pip3.10</span><br></pre></td></tr></table></figure></div>
]]></content>
      <categories>
        <category>环境搭建</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>Java模块化[1.0]-如何裁剪Jre减少体积</title>
    <url>/2023/09/11/Java%E6%A8%A1%E5%9D%97%E5%8C%96-1-0-%E5%A6%82%E4%BD%95%E8%A3%81%E5%89%AAJre%E5%87%8F%E5%B0%91%E4%BD%93%E7%A7%AF/</url>
    <content><![CDATA[<h3 id="Demo-示例"><a href="#Demo-示例" class="headerlink" title="Demo 示例"></a>Demo 示例</h3><ul>
<li>jmod 文件是用来打包 jre 的</li>
</ul>
<p>目录结构</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">Idea目录结构(maven项目/普通java项目)</span><br><span class="line">-java-module</span><br><span class="line">  -src/main/java</span><br><span class="line">  	-com/example/Main.java</span><br><span class="line">  	-module-java.info</span><br><span class="line">  -resources</span><br><span class="line">-output #输出目录</span><br><span class="line">-bin 	#编译后的文件</span><br><span class="line">-hello.jar	#jar包</span><br><span class="line">-hello.jmod	#jmod</span><br></pre></td></tr></table></figure></div>

<p>Main.java</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Hello World!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>module-info.java</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">module com.example &#123;</span><br><span class="line">    exports com.example;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<ul>
<li><p>编译</p>
<ul>
<li>只需基础 jdk 的包，则直接执行</li>
</ul>
<p><code> javac -d .\bin .\src\main\java\module-info.java .\src\main\java\com\example\*.java</code></p>
<ul>
<li>引入第三方包，设置–module-path 依赖包来源地址，–add-modules 设置依赖包名称<ul>
<li>maven 项目可以通过<strong>mvn dependency:copy-dependencies -DoutputDirectory&#x3D;lib</strong>直接导出项目依赖的包到根目录 lib 文件夹下</li>
</ul>
</li>
</ul>
<p><code> javac --module-path .\lib --add-modules fastjson,javafx.controls -d .\bin .\src\main\java\module-info.java .\src\main\java\com\example\*.java</code></p>
</li>
<li><p>打包</p>
<p><code> jar --create --file hello.jar --main-class com.example.Main -C bin .</code></p>
</li>
<li><p>创建模块</p>
<p><code>jmod create --class-path .\hello.jar hello.jmod</code></p>
</li>
<li><p>打包 Jre</p>
<p><code> jlink --module-path .\hello.jmod --add-modules java.base,com.example --output output</code></p>
</li>
</ul>
<hr>
<p>参考文章：<a class="link"   href="https://zhuanlan.zhihu.com/p/479619633" >https://zhuanlan.zhihu.com/p/479619633 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p>模块化对于第三包的处理：需要对其进行模块化</p>
<ul>
<li>虽然有自动模块和未命名模块的操作，但是 jlink 不支持自动模块打包，也就是说还是需要对非模块化包进行模块化才能打包</li>
</ul>
<hr>
<h3 id="打包解决方案"><a href="#打包解决方案" class="headerlink" title="打包解决方案"></a>打包解决方案</h3><h4 id="TimiExe4FX-第三方软件"><a href="#TimiExe4FX-第三方软件" class="headerlink" title="TimiExe4FX(第三方软件)"></a>TimiExe4FX(第三方软件)</h4><ul>
<li>实现打包纯 exe 启动器</li>
</ul>
<h4 id="maven-打包插件"><a href="#maven-打包插件" class="headerlink" title="maven 打包插件"></a>maven 打包插件</h4><p>开源地址：<a class="link"   href="https://github.com/fvarrui/JavaPackager" >https://github.com/fvarrui/JavaPackager <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<ol>
<li>引入插件</li>
<li>执行 mvn package</li>
</ol>
<div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.github.fvarrui<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javapackager<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.4.7<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">phase</span>&gt;</span>package<span class="tag">&lt;/<span class="name">phase</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">goal</span>&gt;</span>package<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- 启动类 --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">mainClass</span>&gt;</span>path.to.your.mainClass<span class="tag">&lt;/<span class="name">mainClass</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- 绑定裁剪jre --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">bundleJre</span>&gt;</span>true<span class="tag">&lt;/<span class="name">bundleJre</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- 生成exe安装包,需要安装Wix或者ISCC软件 --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">generateInstaller</span>&gt;</span>true<span class="tag">&lt;/<span class="name">generateInstaller</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- 管理员权限启动 --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">administratorRequired</span>&gt;</span>false<span class="tag">&lt;/<span class="name">administratorRequired</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- 平台 --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">platform</span>&gt;</span>auto|linux|mac|windows<span class="tag">&lt;/<span class="name">platform</span>&gt;</span></span><br><span class="line">				<span class="comment">&lt;!-- 添加资源打包到根目录 --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">additionalResources</span>&gt;</span></span><br><span class="line">                    <span class="comment">&lt;!-- 可以包含多个 --&gt;</span></span><br><span class="line">            		<span class="tag">&lt;<span class="name">additionalResource</span>&gt;</span>src/main/resources/config.properties<span class="tag">&lt;/<span class="name">additionalResource</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">additionalResources</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">linuxConfig</span>&gt;</span>...<span class="tag">&lt;/<span class="name">linuxConfig</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">macConfig</span>&gt;</span>...<span class="tag">&lt;/<span class="name">macConfig</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">winConfig</span>&gt;</span>...<span class="tag">&lt;/<span class="name">winConfig</span>&gt;</span></span><br><span class="line">                [...]</span><br><span class="line">            <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br></pre></td></tr></table></figure></div>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>模块化</tag>
      </tags>
  </entry>
</search>
